import logging
import asyncio
import csv
import aioschedule
import random
import os
import psycopg2
from time import sleep
from aiogram import Bot, Dispatcher, executor, types

# —É—Ä–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.environ['DATABASE_URL']

# —Ç–æ–∫–µ–Ω –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–º –±–æ—Ç–∞
API_TOKEN = os.environ.get('API_TOKEN')

# –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–≥–¥–∞ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏–ª—Å—è –≤ —á–∞—Ç–µ
@dp.message_handler(content_types=['new_chat_members'])
async def greeting(message: types.message):
    user = message.new_chat_members[0]
    print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")
    mess = f"–ü—Ä–∏–≤–µ—Ç, [{user.first_name}](tg://user?id={str(user.id)}) üññ" \
           "\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –∞–Ω–∏–º–∞—Ç–æ—Ä–æ–≤!" \
           "\n\n–ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –ø—Ä–æ—à—É –≤–∞—Å –∏–∑—É—á–∏—Ç—å [–ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞](https://t.me/c/1110658596/1371)." \
           "\n\n–ê –≤–æ—Ç [–∑–∞–≤–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫ FFmpeg](https://t.me/c/1110658596/16707), –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –∏—Å–∫–∞–ª–∏." \
           "\n\n–ü–æ–∫–∞ –Ω–∞ —ç—Ç–æ–º –≤—Å–µ. –ü—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –≤–∞–º –∞–Ω–∏–º–∞—Ü–∏–π! "
    # print(f"group_id = {message.chat.id}")
    await message.answer(mess, parse_mode="Markdown")
    print(f"–ü–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è —Å –Ω–∏–º, –∏–º—è {user.first_name}")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏–∑ OTZIVI.csv
async def send_feedback():
    group_id = os.environ.get('GROUP_ID')
    # todo: - 600 —á–µ–ª–æ–≤–µ–∫, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!
    # group_id = os.environ.get('DEBUG_GROUP_ID')
    # todo: - –¥–ª—è –¥–µ–±–∞–≥–∞
    await bot.send_chat_action(chat_id=group_id, action="typing")
    sleep(2)

    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cur = conn.cursor()
    cur.execute("SELECT post_index FROM tab;")
    n = cur.fetchone()[0]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ –ª–∏ –æ–∫ —Å —Ñ–∞–π–ª–æ–º —Å –æ—Ç–∑—ã–≤–∞–º–∏
    try:
        f = open("OTZIVI.csv", encoding='utf-8')
    except FileNotFoundError:
        print("***–û—à–∏–±–∫–∞*** –ù–µ –Ω–∞–π–¥–µ–Ω OTZIVI.csv")
        print("–ë–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫–∞–∫, –ø–æ—Å—Ç –Ω–µ–±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        with open("OTZIVI.csv", encoding='utf-8') as f:
            reader = csv.DictReader(f)
            post = list(reader)[n]

        try:
            f = open("add_text-2.txt", encoding='utf-8')
        except FileNotFoundError:
            print("***–û—à–∏–±–∫–∞*** –ù–µ –Ω–∞–π–¥–µ–Ω add_text-2.txt")
            print("–ë–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫–∞–∫, –ø–æ—Å—Ç –Ω–µ–±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            lines = open('add_text-2.txt', encoding='utf-8').read().splitlines()
            myline = random.choice(lines)
            text = "[–ú—É–ª—å—Ç—Ñ–∏–ª—å–º –¥–Ω—è –¥–ª—è –≤–∞—à–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è](" + post["–§–∞–π–ª—ã –ø–æ—Å—Ç–∞"] + ") üëà \n\n" + post["–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"] + "\n\nüëáüëáüëá\n\n" + str(myline)
            await bot.send_message(group_id, text, parse_mode="Markdown")
            print(f"–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç –Ω–æ–º–µ—Ä {n} –≤ –≥—Ä—É–ø–ø—É —Å –∞–π–¥–∏ {group_id}")

            cur.execute("TRUNCATE tab;")
            if n == 30:
                cur.execute(f"INSERT INTO tab (post_index) VALUES ({0});")
                conn.commit()
                print("***–ü–æ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞—é –≤ –±–∞–∑—É 0")
            else:
                cur.execute(f"INSERT INTO tab (post_index) VALUES ({n + 1});")
                conn.commit()
            cur.close()
            conn.close()


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—é
async def scheduler():
    # –≤–æ—Ç —Ç—É—Ç –Ω—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è, –±—É–¥–µ—Ç –ø–æ—Å—Ç–∏—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å
    # todo: –ø—Ä–∏–¥–µ—Ç—Å—è —Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ 3 —á–∞—Å–∞ —Ä–∞–Ω—å—à–µ –ú–°–ö, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä Heroku –≤ —à—Ç–∞—Ç–∞—Ö
    # aioschedule.every(20).seconds.do(send_feedback)
    aioschedule.every().day.at("7:00").do(send_feedback)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(2)


# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
async def on_startup(_):
    asyncio.create_task(scheduler())


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
